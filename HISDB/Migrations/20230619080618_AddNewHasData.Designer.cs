// <auto-generated />
using System;
using HISDB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HISDB.Migrations
{
    [DbContext(typeof(HisdbContext))]
    [Migration("20230619080618_AddNewHasData")]
    partial class AddNewHasData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HISDB.Models.Cashier", b =>
                {
                    b.Property<string>("CasId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CasID");

                    b.HasKey("CasId")
                        .HasName("PK__Cashiers__6B6EF2C78E8D5CE5");

                    b.ToTable("Cashiers");

                    b.HasData(
                        new
                        {
                            CasId = "C11201001"
                        },
                        new
                        {
                            CasId = "C11201002"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Chart", b =>
                {
                    b.Property<string>("ChaId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ChaID");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("History")
                        .HasColumnType("datetime2");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Vdate")
                        .HasColumnType("datetime")
                        .HasColumnName("VDate");

                    b.HasKey("ChaId")
                        .HasName("PK__Charts__97A59C75CBFB1D4C");

                    b.ToTable("Charts");

                    b.HasData(
                        new
                        {
                            ChaId = "CHA2023053013001001",
                            DepartmentName = "心臟內科",
                            History = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Object = "心臟病",
                            Subject = "胸悶",
                            Vdate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChaId = "CHA2023053013001002",
                            DepartmentName = "心臟內科",
                            History = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Object = "心臟病",
                            Subject = "心跳好像一直不規律，呼吸不過來",
                            Vdate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChaId = "CHA2023053013001003",
                            DepartmentName = "心臟內科",
                            History = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Object = "心臟病",
                            Subject = "頭痛、噁心、冒冷汗",
                            Vdate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChaId = "CHA2023053013001004",
                            DepartmentName = "心臟內科",
                            History = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Object = "心臟病",
                            Subject = "呼吸急促、胸悶",
                            Vdate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChaId = "CHA2023053013001005",
                            DepartmentName = "心臟內科",
                            History = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Object = "心臟病",
                            Subject = "心臟很痛",
                            Vdate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HISDB.Models.ChartsDrugsDosage", b =>
                {
                    b.Property<string>("ChaId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ChaID");

                    b.Property<string>("DrugId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DrugID");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("DosId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DosID");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("ChaId", "DrugId")
                        .HasName("PK__Charts_D__43E0B46C2967DE43");

                    b.HasIndex("DosId")
                        .IsUnique();

                    b.HasIndex("DrugId");

                    b.ToTable("Charts_Drugs_Dosages", (string)null);

                    b.HasData(
                        new
                        {
                            ChaId = "CHA2023053013001001",
                            DrugId = "046404",
                            Days = 3,
                            DosId = "QD",
                            Quantity = 1.0,
                            Remark = "無",
                            Total = 9
                        },
                        new
                        {
                            ChaId = "CHA2023053013001002",
                            DrugId = "046404",
                            Days = 3,
                            DosId = "BID",
                            Quantity = 1.0,
                            Remark = "無",
                            Total = 9
                        },
                        new
                        {
                            ChaId = "CHA2023053013001003",
                            DrugId = "046404",
                            Days = 3,
                            DosId = "QID",
                            Quantity = 1.0,
                            Remark = "無",
                            Total = 9
                        },
                        new
                        {
                            ChaId = "CHA2023053013001004",
                            DrugId = "046404",
                            Days = 3,
                            DosId = "Q4H",
                            Quantity = 1.0,
                            Remark = "無",
                            Total = 9
                        },
                        new
                        {
                            ChaId = "CHA2023053013001005",
                            DrugId = "046404",
                            Days = 3,
                            DosId = "HS",
                            Quantity = 1.0,
                            Remark = "無",
                            Total = 9
                        });
                });

            modelBuilder.Entity("HISDB.Models.Detail", b =>
                {
                    b.Property<string>("DetId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DetID");

                    b.Property<string>("CasId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CasID");

                    b.Property<decimal>("MedicalCost")
                        .HasColumnType("decimal(20, 0)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PatientID");

                    b.Property<decimal>("Payable")
                        .HasColumnType("decimal(20, 0)");

                    b.Property<decimal>("Registration")
                        .HasColumnType("decimal(20, 0)");

                    b.HasKey("DetId")
                        .HasName("PK__Details__D8957AFCE2D73766");

                    b.HasIndex("CasId");

                    b.HasIndex("PatientId");

                    b.ToTable("Details");

                    b.HasData(
                        new
                        {
                            DetId = "DET2023053013001001",
                            CasId = "C11201001",
                            MedicalCost = 500m,
                            PatientId = "A118992634",
                            Payable = 650m,
                            Registration = 150m
                        },
                        new
                        {
                            DetId = "DET2023053013001002",
                            CasId = "C11201001",
                            MedicalCost = 500m,
                            PatientId = "O101929955",
                            Payable = 650m,
                            Registration = 150m
                        },
                        new
                        {
                            DetId = "DET2023053013001003",
                            CasId = "C11201001",
                            MedicalCost = 500m,
                            PatientId = "H255590997",
                            Payable = 650m,
                            Registration = 150m
                        },
                        new
                        {
                            DetId = "DET2023053013001004",
                            CasId = "C11201001",
                            MedicalCost = 500m,
                            PatientId = "L198058112",
                            Payable = 650m,
                            Registration = 150m
                        },
                        new
                        {
                            DetId = "DET2023053013001005",
                            CasId = "C11201001",
                            MedicalCost = 500m,
                            PatientId = "S257920071",
                            Payable = 650m,
                            Registration = 150m
                        });
                });

            modelBuilder.Entity("HISDB.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DoctorID");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__2DC00EDF9BB9663C");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = "D11201001",
                            DepartmentName = "心臟內科"
                        },
                        new
                        {
                            DoctorId = "D11201002",
                            DepartmentName = "心臟內科"
                        });
                });

            modelBuilder.Entity("HISDB.Models.DoctorsPatientsChart", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PatientID");

                    b.Property<string>("ChaId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ChaID");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DoctorID");

                    b.HasKey("PatientId", "ChaId")
                        .HasName("PK__Doctors___20274777D9BDA64F");

                    b.HasIndex("ChaId");

                    b.HasIndex("DoctorId", "ChaId")
                        .IsUnique();

                    b.ToTable("Doctors_Patients_Charts", (string)null);

                    b.HasData(
                        new
                        {
                            PatientId = "A118992634",
                            ChaId = "CHA2023053013001001",
                            DoctorId = "D11201001"
                        },
                        new
                        {
                            PatientId = "O101929955",
                            ChaId = "CHA2023053013001002",
                            DoctorId = "D11201001"
                        },
                        new
                        {
                            PatientId = "H255590997",
                            ChaId = "CHA2023053013001003",
                            DoctorId = "D11201002"
                        },
                        new
                        {
                            PatientId = "L198058112",
                            ChaId = "CHA2023053013001004",
                            DoctorId = "D11201002"
                        },
                        new
                        {
                            PatientId = "S257920071",
                            ChaId = "CHA2023053013001005",
                            DoctorId = "D11201002"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Dosage", b =>
                {
                    b.Property<string>("DosId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DosID");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Freq")
                        .HasColumnType("int");

                    b.HasKey("DosId")
                        .HasName("PK__Dosages__4DFE76ACB6EE094D");

                    b.ToTable("Dosages");

                    b.HasData(
                        new
                        {
                            DosId = "QD",
                            Direction = "每日服用一次，通常在早上(飯後)，服用時間請根據醫生指示",
                            Freq = 1
                        },
                        new
                        {
                            DosId = "BID",
                            Direction = "每天兩次，通常在早晚(飯後)",
                            Freq = 2
                        },
                        new
                        {
                            DosId = "TID",
                            Direction = "每日三次，通常會配合早中晚吃飯時間(飯後)",
                            Freq = 3
                        },
                        new
                        {
                            DosId = "QID",
                            Direction = "每日四次，通常是早、中、晚(飯後)加上睡前共四次",
                            Freq = 4
                        },
                        new
                        {
                            DosId = "Q4H",
                            Direction = "每隔四小時使用一次",
                            Freq = 6
                        },
                        new
                        {
                            DosId = "Q6H",
                            Direction = "每隔六小時使用一次",
                            Freq = 4
                        },
                        new
                        {
                            DosId = "HS",
                            Direction = "睡前服用",
                            Freq = 1
                        });
                });

            modelBuilder.Entity("HISDB.Models.Drug", b =>
                {
                    b.Property<string>("DrugId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DrugID");

                    b.Property<string>("AdverseReactions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Appearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atccode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ATCCode");

                    b.Property<string>("ClinicalUses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dcontent")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DContent");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nhicode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NHICode");

                    b.Property<string>("OtherInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointOfHealthEducation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roaid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ROAID");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedUsage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(20, 0)");

                    b.Property<string>("WarningPrecautions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Warning_Precautions");

                    b.HasKey("DrugId")
                        .HasName("PK__Drugs__908D66F6408F425E");

                    b.HasIndex("Roaid");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            DrugId = "046404",
                            AdverseReactions = "暈眩、頭痛，通常是輕微的且尤其於治療的初期",
                            Appearance = "白色圓形錠,Syntrend,S｜Y",
                            Atccode = "C07AG02",
                            ClinicalUses = "高血壓、鬱血性心臟衰竭",
                            Dcontent = "25mg/tab",
                            DrugName = "Syntrend",
                            GenericName = "Carvedilol",
                            Nhicode = "AC46404100",
                            OtherInstructions = "隨餐或餐後立即服用",
                            PointOfHealthEducation = "1.懷孕或計劃懷孕、氣喘或其他肺臟疾病、糖尿病、甲狀腺機能亢進，請先告訴醫師。 2.不要自行改變劑量或停藥。 3.請定時測量脈搏，低於醫師所訂標準請即就醫。 4.服用後可能發生頭暈、低血壓，小心跌倒。 5.糖尿病病人請注意，此藥可能會影響血糖值，掩蓋低血糖現象，應小心監測血糖。",
                            ProcessingMethod = "無資料",
                            Roaid = "PO",
                            StorageConditions = "室溫保存",
                            SuggestedUsage = "治療的期間︰服用 Carvedilol需長期性的治療。不應突然停止治療而應以星期為間隔逐漸減少治療，此對併有冠狀心臟疾病的病人尤其重要",
                            UnitPrice = 240m,
                            WarningPrecautions = "無資料"
                        },
                        new
                        {
                            DrugId = "009554",
                            AdverseReactions = "疲憊、頭痛、顏面神經痛、精神沮喪、幻覺、困倦、低血壓、視力障礙、厭食、嘔吐、腹瀉、發汗、吞嚥困難",
                            Appearance = "白色圓扁形錠, |D025",
                            Atccode = "C01AA05",
                            ClinicalUses = "心臟衰竭、心律不整",
                            Dcontent = "0.25mg/tab",
                            DrugName = "Digoxin",
                            GenericName = "Digoxin",
                            Nhicode = "BC09554100",
                            OtherInstructions = "無資料",
                            PointOfHealthEducation = "1.不要自行改變劑量或停藥。 2.定期量血壓和心跳。 3.服用後可能發生頭暈、低血壓，小心跌倒。 4.定期監測藥物血中濃度與血鉀濃度。 5.服藥期間若發生虛弱無力、心跳太慢，意識混亂等應即刻就醫。 6.避免高麩飲食。",
                            ProcessingMethod = "無資料",
                            Roaid = "PO",
                            StorageConditions = "室溫陰涼乾燥處保存",
                            SuggestedUsage = "對於輕度心衰竭的病人，應每天給藥 0.25~0.75mg，共一星期，接著給予一適當的維持劑量，達到毛地黃化的速度可和緩些",
                            UnitPrice = 240m,
                            WarningPrecautions = "無資料"
                        },
                        new
                        {
                            DrugId = "021757",
                            AdverseReactions = "便秘、腹瀉、頭痛、噁心、無力等",
                            Appearance = "橘 | 淺藍膠囊,CellCept 250,Roche",
                            Atccode = "L04AA06",
                            ClinicalUses = "預防或緩解腎臟移植之急性器官排斥、預防心臟和肝臟移植之急性器官排斥",
                            Dcontent = "250mg/cap",
                            DrugName = "Cellcept",
                            GenericName = "Mycophenolate Mofetil",
                            Nhicode = "BC20999100",
                            OtherInstructions = "空腹時服用。不應膠囊打開或弄碎",
                            PointOfHealthEducation = "1.服用本藥會使您抵抗力較弱，請經常洗手並避免接觸有傳染性疾病如感冒的親友。 2.接種任何疫苗之前請先諮詢你的醫生。 3.此藥可能使您皮膚對光較敏感，外出時請做好防曬工作。 4.告訴牙醫、外科醫生和其他醫生您在使用本藥物。 5.不要同時與含有鎂或鋁的制酸劑一起服用。 6.若有高血壓，每日定時測量血壓、脈搏並列入記錄，提供醫師參考。 7.如果膠囊已經打開或破裂，不要接觸內含的藥物。如果已經接觸到藥物或藥物跑進眼睛，請立即洗手或洗眼睛。 8.建議具有生育能力的女性在服用期間及停藥6周內採取有效避孕措施且請勿授乳。有性行為的男性在服用期間及停藥90天內採取有效避孕措施且不應捐獻精液。",
                            ProcessingMethod = "無資料",
                            Roaid = "PO",
                            StorageConditions = "儲存於30℃以下避光處",
                            SuggestedUsage = "口服給藥在腎臟、心臟和肝臟移植後應儘速給予 CellCept的起始劑量",
                            UnitPrice = 240m,
                            WarningPrecautions = "整粒吞服, 勿嚼碎；孕婦禁用；服藥後可能嗜睡或眩暈"
                        },
                        new
                        {
                            DrugId = "026672",
                            AdverseReactions = "低血壓、高血鉀、頭暈、腎衰竭、血管性水腫等",
                            Appearance = "淺黃橢圓形錠,NVR,L1",
                            Atccode = "C09DX04",
                            ClinicalUses = "治療慢性心臟衰竭",
                            Dcontent = "100mg/tab",
                            DrugName = "Entresto",
                            GenericName = "Sacubitril and Valsartan",
                            Nhicode = "BC26671100",
                            OtherInstructions = "可與食物併服或是空腹服用",
                            PointOfHealthEducation = "1.預備懷孕、已懷孕或授乳應先告訴醫師。 2.不要自行改變劑量或停藥。 3.定期量血壓和心跳。 4.服用後可能發生頭暈、低血壓，小心跌倒。 5.如長期使用含高鉀的飲食(如低鈉鹽、香蕉、柑橘類高鉀水果），須先請教醫師。",
                            ProcessingMethod = "無資料",
                            Roaid = "PO",
                            StorageConditions = "儲存於30℃以下避光處",
                            SuggestedUsage = "不建議重度肝功能不全患者使用此藥物",
                            UnitPrice = 240m,
                            WarningPrecautions = "孕婦禁用；服藥後可能有姿態性低血壓；"
                        },
                        new
                        {
                            DrugId = "026173",
                            AdverseReactions = "呼吸道感染、頭痛、水腫、昏厥、低血壓、心悸、貧血等",
                            Appearance = "橘白色圓凸錠,62.5",
                            Atccode = "C02KX01",
                            ClinicalUses = "治療因先天性心臟病續發WHO Class III 肺動脈高血壓",
                            Dcontent = "62.5mg/tab",
                            DrugName = "Tracleer",
                            GenericName = "Bosentan Monohydrate",
                            Nhicode = "BC26173100",
                            OtherInstructions = "每日服用1-2次，請於每日固定時間服用",
                            PointOfHealthEducation = "1.除非醫師指示，請勿任意停藥。 2.漏服一劑，請在想起時立即服用，切勿依次服用 2劑藥物。",
                            ProcessingMethod = "無資料",
                            Roaid = "PO",
                            StorageConditions = "儲存於30℃以下避光處",
                            SuggestedUsage = "腎功能受損者不需要調整劑量。接受血液透析治療之病人，亦無需調整劑量",
                            UnitPrice = 240m,
                            WarningPrecautions = "無資料"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__7AD04FF1CB77EC3F");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = "D11201001",
                            Account = "D1001",
                            EmployeeName = "YuDaLu",
                            Password = "D1001"
                        },
                        new
                        {
                            EmployeeId = "P11201001",
                            Account = "P1002",
                            EmployeeName = "鍾伊惠",
                            Password = "P1002"
                        },
                        new
                        {
                            EmployeeId = "D11201002",
                            Account = "D1003",
                            EmployeeName = "連智健",
                            Password = "D1003"
                        },
                        new
                        {
                            EmployeeId = "C11201001",
                            Account = "C1004",
                            EmployeeName = "盧昱達",
                            Password = "C1004"
                        },
                        new
                        {
                            EmployeeId = "P11201002",
                            Account = "P1005",
                            EmployeeName = "林廣學",
                            Password = "P1005"
                        },
                        new
                        {
                            EmployeeId = "C11201002",
                            Account = "C1006",
                            EmployeeName = "Althea",
                            Password = "C1006"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PatientID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Blood")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CaseHistory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nhicard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NHICard");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC346C8B25736");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = "A118992634",
                            Address = "台北市",
                            BirthDate = new DateTime(1999, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blood = "A",
                            CaseHistory = "PAT2016061013001001",
                            Gender = "1",
                            Mobile = "0912345678",
                            Nhicard = "000012345678",
                            PatientName = "水戶黃門"
                        },
                        new
                        {
                            PatientId = "O101929955",
                            Address = "新竹市",
                            BirthDate = new DateTime(1997, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blood = "A",
                            CaseHistory = "PAT2016061013001002",
                            Gender = "1",
                            Mobile = "0965478932",
                            Nhicard = "080009699912",
                            PatientName = "海綿寶寶"
                        },
                        new
                        {
                            PatientId = "H255590997",
                            Address = "桃園市",
                            BirthDate = new DateTime(1997, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blood = "AB",
                            CaseHistory = "PAT2016122513001003",
                            Gender = "2",
                            Mobile = "0955664477",
                            Nhicard = "123456789011",
                            PatientName = "晨曦"
                        },
                        new
                        {
                            PatientId = "L198058112",
                            Address = "台中市",
                            BirthDate = new DateTime(1992, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blood = "O",
                            CaseHistory = "PAT2017052613001004",
                            Gender = "1",
                            Mobile = "0964973125",
                            Nhicard = "647519785134",
                            PatientName = "野原新之助"
                        },
                        new
                        {
                            PatientId = "S257920071",
                            Address = "高雄市",
                            BirthDate = new DateTime(2000, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Blood = "O",
                            CaseHistory = "PAT2017081113001005",
                            Gender = "2",
                            Mobile = "0997919395",
                            Nhicard = "715687493157",
                            PatientName = "橘子"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Pharmacist", b =>
                {
                    b.Property<string>("PhaId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PhaID");

                    b.HasKey("PhaId")
                        .HasName("PK__Pharmaci__5D18076B51E8930B");

                    b.ToTable("Pharmacists");

                    b.HasData(
                        new
                        {
                            PhaId = "P11201001"
                        },
                        new
                        {
                            PhaId = "P11201002"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Prescription", b =>
                {
                    b.Property<string>("PresNo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DrugDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhaId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PhaID");

                    b.HasKey("PresNo")
                        .HasName("PK__Prescrip__1401F7AF47170057");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhaId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            PresNo = "PRE2023053013001001",
                            DrugDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "A118992634",
                            PhaId = "P11201001"
                        },
                        new
                        {
                            PresNo = "PRE2023053013001002",
                            DrugDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "O101929955",
                            PhaId = "P11201001"
                        },
                        new
                        {
                            PresNo = "PRE2023053013001003",
                            DrugDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "H255590997",
                            PhaId = "P11201001"
                        },
                        new
                        {
                            PresNo = "PRE2023053013001004",
                            DrugDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "L198058112",
                            PhaId = "P11201001"
                        },
                        new
                        {
                            PresNo = "PRE2023053013001005",
                            DrugDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "S257920071",
                            PhaId = "P11201001"
                        });
                });

            modelBuilder.Entity("HISDB.Models.RoutesOfAdminstration", b =>
                {
                    b.Property<string>("Roaid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ROAID");

                    b.Property<string>("BodyParts")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Roaid")
                        .HasName("PK__RoutesOf__84E1649C98E0E0F3");

                    b.ToTable("RoutesOfAdminstrations");

                    b.HasData(
                        new
                        {
                            Roaid = "PO",
                            BodyParts = "口服"
                        });
                });

            modelBuilder.Entity("HISDB.Models.Cashier", b =>
                {
                    b.HasOne("HISDB.Models.Employee", "Cas")
                        .WithOne("Cashier")
                        .HasForeignKey("HISDB.Models.Cashier", "CasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cashiers_Employees");

                    b.Navigation("Cas");
                });

            modelBuilder.Entity("HISDB.Models.ChartsDrugsDosage", b =>
                {
                    b.HasOne("HISDB.Models.Chart", "Cha")
                        .WithMany("ChartsDrugsDosages")
                        .HasForeignKey("ChaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HISDB.Models.Dosage", "Dos")
                        .WithOne("ChartsDrugsDosage")
                        .HasForeignKey("HISDB.Models.ChartsDrugsDosage", "DosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HISDB.Models.Drug", "Drug")
                        .WithMany("ChartsDrugsDosages")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cha");

                    b.Navigation("Dos");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("HISDB.Models.Detail", b =>
                {
                    b.HasOne("HISDB.Models.Cashier", "Cas")
                        .WithMany("Details")
                        .HasForeignKey("CasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Details_Cashiers");

                    b.HasOne("HISDB.Models.Patient", "Patient")
                        .WithMany("Details")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Details_Patients");

                    b.Navigation("Cas");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HISDB.Models.Doctor", b =>
                {
                    b.HasOne("HISDB.Models.Employee", "DoctorNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("HISDB.Models.Doctor", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctors_Employees");

                    b.Navigation("DoctorNavigation");
                });

            modelBuilder.Entity("HISDB.Models.DoctorsPatientsChart", b =>
                {
                    b.HasOne("HISDB.Models.Chart", "Cha")
                        .WithMany("DoctorsPatientsCharts")
                        .HasForeignKey("ChaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctors_Patients_Charts_Charts");

                    b.HasOne("HISDB.Models.Doctor", "Doctor")
                        .WithMany("DoctorsPatientsCharts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctors_Patients_Charts_Doctors");

                    b.HasOne("HISDB.Models.Patient", "Patient")
                        .WithMany("DoctorsPatientsCharts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctors_Patients_Charts_Patients");

                    b.Navigation("Cha");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HISDB.Models.Drug", b =>
                {
                    b.HasOne("HISDB.Models.RoutesOfAdminstration", "Roa")
                        .WithMany("Drugs")
                        .HasForeignKey("Roaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Drugs_RoutesOfAdminstrations");

                    b.Navigation("Roa");
                });

            modelBuilder.Entity("HISDB.Models.Pharmacist", b =>
                {
                    b.HasOne("HISDB.Models.Employee", "Pha")
                        .WithOne("Pharmacist")
                        .HasForeignKey("HISDB.Models.Pharmacist", "PhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pharmacists_Employees");

                    b.Navigation("Pha");
                });

            modelBuilder.Entity("HISDB.Models.Prescription", b =>
                {
                    b.HasOne("HISDB.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_Patients");

                    b.HasOne("HISDB.Models.Pharmacist", "Pha")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_Pharmacists");

                    b.Navigation("Patient");

                    b.Navigation("Pha");
                });

            modelBuilder.Entity("HISDB.Models.Cashier", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("HISDB.Models.Chart", b =>
                {
                    b.Navigation("ChartsDrugsDosages");

                    b.Navigation("DoctorsPatientsCharts");
                });

            modelBuilder.Entity("HISDB.Models.Doctor", b =>
                {
                    b.Navigation("DoctorsPatientsCharts");
                });

            modelBuilder.Entity("HISDB.Models.Dosage", b =>
                {
                    b.Navigation("ChartsDrugsDosage")
                        .IsRequired();
                });

            modelBuilder.Entity("HISDB.Models.Drug", b =>
                {
                    b.Navigation("ChartsDrugsDosages");
                });

            modelBuilder.Entity("HISDB.Models.Employee", b =>
                {
                    b.Navigation("Cashier");

                    b.Navigation("Doctor");

                    b.Navigation("Pharmacist");
                });

            modelBuilder.Entity("HISDB.Models.Patient", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("DoctorsPatientsCharts");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HISDB.Models.Pharmacist", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HISDB.Models.RoutesOfAdminstration", b =>
                {
                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
